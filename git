创建版本库：
  先新建文件夹
  git init  （ls -ah)
  
  git config --global user.email "1181545104@qq.com"
  git config --global user.name "Yvonen111"

  
把文件添加到版本库:
  git add file1.txt
  git add file2.txt file3.txt
  git commit -m "add 3 files."
  

添加文件到Git仓库，分两步：
    使用命令git add <file>，注意，可反复多次使用，添加多个文件；
    使用命令git commit -m <message>，完成。

查看历史记录：
  git log
  git log --pretty=oneline   #commit id（版本号）
  
  git reset --hard HEAD^  #上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
  cat readme.txt  #查看文件内容
  git reset --hard 1094a  #退回到指定版本
  git reflog  #记录每次命令
  git status    #查看一下状态：
  
撤销修改：
  git checkout -- file    #可以丢弃工作区的修改    
  
  把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
  一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
  一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
  总之，就是让这个文件回到最近一次git commit或git add时的状态。命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。
  
  git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区：
  git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。
  当我们用HEAD时，表示最新的版本。
  再用git status查看一下，现在暂存区是干净的，工作区有修改：
  
删除文件：
  1. 手动删除 / rm 文件;
     工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了：
          一 是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：   
                若已经git commit,  可以通过   git reset --hard 1094a  #退回到指定版本  
          二 删错了，因为版本库里还有呢（在工作区间），所以可以很轻松地把误删的文件恢复到最新版本：  git checkout -- test.txt
          
          
          git rm test.txt 相当于是删除工作目录中的test.txt文件,并把此次删除操作提交到了暂存区
          使用git checkout -- test.txt相当于是让工作目录test.txt恢复到暂存区中test.txt的状态,
          
          但是工作目录中test.txt已经被删除,无法找到文件来再次删除所以报错,
           必须先使用git reset head test.txt在暂存区中将删除操作丢弃,
            然后在git checkout -- test.txt就是直接将工作目录中test.txt恢复到版本库中的状态.
  
         手动修改
         工作区的改动（红色）       （使用 "git add/rm <文件>..." 更新要提交的内容）
                                    （使用 "git checkout -- <文件>..." 丢弃工作区的改动）
         
         git add/rm  <文件>
         提交到暂存区  （绿色）      （使用 "git commit -m "  " " 提交暂存）
                                    （使用 "git reset HEAD <文件>..." 以取消暂存）
                  
         git commit -m "  "
         提交暂存区的操作
         
添加远程库：
远程连接：        
         
learngit token:
   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
   
   git remote set-url origin https://<your_token>@github.com/<USERNAME>/<REPO>.git
    <your_token>：换成你自己得到的token
    <USERNAME>：是你自己github的用户名
    <REPO>：是你的仓库名称

  git remote add origin https://github.com/Yvonen111/learngit.git
  git remote set-url origin https://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@github.com/Yvonen111/learngit.git  
  
  git remote add origin git@github.com:Yvonen111/learn.git 
  git push -u origin master
  
  git push origin master    
  
删除远程连接：  
  git remote -v       
	git remote rm origin
  
从远程库克隆：
	git clone https://github.com/Yvonen111/learngit.git
	git clone git@github.com:Yvonen111/learn.git 

创建分支：
	git checkout -b dev			# 加上-b参数表示创建并切换
			||
	git branch dev
	git checkout dev
			||
	git switch -c dev			# 创建并切换到新的dev分支
	
	git branch  	# 查看当前分支
	//修改文件   add commit

合并分支：
	git checkout master   #切换回master分支 
				||
	git switch master		#切换到已有的master分支
	
	git merge dev			#把dev分支的工作成果合并到master分支
	
	git branch -d dev		#删除dev分支

小结：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>或者git switch <name>
* 创建+切换分支：git checkout -b <name>或者git switch -c <name>
合并某分支到当前分支：git merge <name>
* 删除分支：git branch -d <name>

解决合并冲突：
（分支修改并提交了，切换到master后，又修改文件并提交，会产生冲突。需要查看文件内容，修改并提交）
查看分支的合并情况：git log --graph --pretty=oneline --abbrev-commit   


添加电脑密钥：
找到.ssh文件夹;
生成id_rsa和id_rsa.pub两个文件： ssh-keygen -t rsa-C 1181545104@qq.com
登录GitHub，打开“Account settings”，“SSH Keys”页面：
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：
测试：ssh -T git@github.com
即可克隆文件。

管理分支：
master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
--no-ff参数，表示禁用Fast forward：	git merge --no-ff -m "merge with no-ff" dev
分支历史：	git log --graph --pretty=oneline --abbrev-commit

bug分支：
步骤：
	处于f1,但未修改完，没有提交。暂存该状态：git stash
	然后切换到master:	git checkout master
	新建并切换问题分支：	git checkout -b issue-101
	修改文件并提交；
	切换并合并到master:	git merge --no-ff -m "merged bug fix 101" issue-101
	再切换f1,查看状态：	git status
	* 查看缓存列表：	git stash list
	* 恢复到缓存： git stash pop 或者 git stash apply&git stash drop 或者git stash apply stash@{0}
	* 复制一个特定的提交到当前分支： git cherry-pick 4c805e2	 git cherry-pick <commit>
	
	
feature分支：
每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。
	
多人协作：
    首先，可以试图用git push origin <branch-name>推送自己的修改；
    如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
    如果合并有冲突，则解决冲突，并在本地提交；
    没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
		如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。
		
小结：
    查看远程库信息，使用git remote -v；
    本地新建的分支如果不推送到远程，对其他人就是不可见的；
    从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
    在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
    建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
    从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

小结:
    git rebase
    git log --graph --pretty=oneline --abbrev-commit
    rebase操作可以把本地未push的分叉提交历史整理成直线；
    rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。

创建标签：
	 切换到需要打标签的分支上：	git branch		git checkout master
	 打新标签：	git tag v1.0
	 查看标签：	git tag
	 默认标签是打在最新提交的commit上的。	git log --pretty=oneline --abbrev-commit
	 	 标签不是按时间顺序列出，而是按字母排序的。
	 特定commit id 打标签： 	git tag v0.9 f52c633
	 查看标签信息：	git show <tagname>
	 创建带有说明的标签：		git tag -a v0.1 -m "version 0.1 released" 1094adb
  		 -a指定标签名
  		 -m指定说明文字
  	
操作标签：
		删除标签：		git tag -d v0.1
		推送某个标签到远程：		git push origin <tagname>
		推送全部尚未推送到远程的本地标签：		git push origin --tags
		如果标签已经推送到远程，要删除远程标签：
				先从本地删除：	git tag -d v0.9
				从远程删除：	git push origin :refs/tags/v0.9
							||
				git push origin --delete  tagname
				
小结：
    在GitHub上，可以任意Fork开源仓库；
    自己拥有Fork后的仓库的读写权限；
    可以推送pull request给官方仓库来贡献代码。

小结
    忽略某些文件时，需要编写.gitignore；
    --在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。--
    .gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！
    强制添加：		 git add -f App.class
    .gitignore写得有问题，查找错误：		git check-ignore -v App.class
    把指定文件排除在.gitignore规则外：   !+文件名
    
忽略文件的原则是：
    忽略操作系统自动生成的文件，比如缩略图等；
    忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
    忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。

配置别名：
		st表示status：		git config --global alias.st status
		co表示checkout：		git config --global alias.co checkout
		ci表示commit：		git config --global alias.ci commit
		br表示branch：		git config --global alias.br branch
		
		命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区。
		git config --global alias.unstage 'reset HEAD'
		git unstage test.py
		git reset HEAD test.py
		
		加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。
		每个仓库的Git配置文件都放在.git/config文件中：	cat .git/config 
		当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中：		cat .gitconfig
		git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
		git lg
		
